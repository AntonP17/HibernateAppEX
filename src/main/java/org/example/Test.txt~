СОХРАНЕНИЕ , УДАЛЕНИЕ , ОБНОВЛЕНИЕ СУЩНОСТЕЙ

код один ко дному

Passport passport = session.get(Passport.class, 1);
            System.out.println(passport.getCitizen().getName());


//            Citizen citizen = new Citizen("John Doe"); // создаем обьект
//          //  Passport passport = new Passport(citizen, 123456); // создаем обьект
//            Passport passport = new Passport(123456);
//
//            citizen.setPassport(passport); // связываем обьекты
//            passport.setCitizen(citizen); // связываем обьекты
//
//            session.save(citizen); // сохраняем обьект в БД

код к отношению один ко многим
Students students = new Students("Ivan", 23);

            students.addOrder(new Orders("order1"));
            students.addOrder(new Orders("order2"));
            students.addOrder(new Orders("order3"));

            // старый код
//            Students students = new Students("Ivan", 23);
//            students.addOrder(new Orders("order1"));
//            students.addOrder(new Orders("order2"));
//            students.addOrder(new Orders("order3"));

            session.save(students);

// HQL запрос более простой
          //  List<Person> people = session.createQuery("FROM Person").getResultList(); всех получаем

            List<Person> people = session.createQuery("FROM Person WHERE name LIKE 'A%' ").getResultList(); // получаем по условию

           // session.createQuery("UPDATE Person SET name = 'Alex' where age < 30").executeUpdate(); // обновляем по условию

            session.createQuery("DELETE FROM Person WHERE age < 30").executeUpdate(); // удаляем по условию


            for (Person person : people) {
                System.out.println(person.getName() + " " + person.getAge() + " "+ person.getId());
            }

            save возвращает id , гарантирует первичный ключ , принадлежит HIbernate
            persist не возвращает , не гарантирует , принадлежит JPA


Person person = new Person("John", 25); // создаем обьект это как раз временное состояние
            Person person2 = new Person("John2", 55); // создаем обьект
            Person person3 = new Person("John3", 65); // создаем обьект
            Person person4 = new Person("Anton", 75); // создаем обьект

            session.save(person); // сохраняем обьект в БД
          session.save(person2); // сохраняем обьект в БД
           session.save(person3); // сохраняем обьект в БД


            Person personGet = session.get(Person.class, 1); // получаем обьект по id
            personGet.setName("Alex");  // обновляем обьект в БД

            Person personGet2 = session.get(Person.class, 2); // получаем обьект по id
           session.delete(personGet2); // удаляем обьект в БД

            System.out.println(person4.getId());

          Person personTest = session.get(Person.class, 1); // получаем обьект по id
            System.out.println(personTest.getName() + " " + personTest.getAge() + " "+ personTest.getId());

КАСКАДИРОВАНИЕ

cascade = CascadeType.ALL
пока вот это , что при удалении одного удалется многие



СОСТОЯНИЯ СУЩНОСТЕЙ , ЖИЗНЕННЫЕ ЦИКЛЫ

- TRANSIENT (временное состояние)

Person person = new Person("John", 25); // создаем обьект
person.setName("Alex"); // обновляем обьект в БД

- PERSISTENT (управляемое состояние)

Session session = sessionFactory.openSession(); // галвный обьект для свзяи с Hibernate
Transaction transaction = session.beginTransaction(); // начинаем транзакцию

session.save(person); // сохраняем обьект в БД (ЭТО И ЕСТЬ PERSISTENT)

transaction.commit(); // применяем транзакцию
session.close(); // закрываем сессию

- DETACHED (отсоединенное состояние)

session.close(); // закрываем сессию , обьект переходит в DETACHED

- REMOVED (удаленное состояние)

session.delete(person); // удаляем обьект в БД

ПРИМЕР ЖИЗНЕННЫХ ЦИКЛОВ
// Transient
Person person = new Person();
person.setName("John Doe");

// Persistent
Session session = sessionFactory.openSession();
Transaction transaction = session.beginTransaction();
session.save(person); // Сохраняем объект в базе данных
transaction.commit();

// Detached
session.close();

// Persistent (повторное присоединение)
session = sessionFactory.openSession();
transaction = session.beginTransaction();
session.update(person); // Присоединяем объект к сессии
transaction.commit();

// Removed
transaction = session.beginTransaction();
session.delete(person); // Удаляем объект
transaction.commit();

// Transient (после удаления)
session.close();